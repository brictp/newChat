<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login & Register From</title>

    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        background-color: #f5f5f5;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      .container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .form-container {
        background-color: #fff;
        padding: 20px;
        margin: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 300px;
      }

      .form h2 {
        margin-bottom: 20px;
        font-size: 24px;
        text-align: center;
      }

      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }

      input {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px;
        border-radius: 4px;
      }

      button {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
      }

      button:hover {
        background-color: #0069d9;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <% if (typeof username !== "undefined") { %>
      <div class="form-container">
        <h2>Hola <%= username %>!</h2>
        <p>Estas en el panel de administracion</p>
        <a href="/chat">
          <button>Chat</button>
        </a>
        <a href="/protected">
          <button id="protected">Contenido protegido</button>
        </a>
        <button id="close-session">Cerrar sesion</button>
      </div>

      <% } %> <% if (typeof username === "undefined") { %>
      <div class="form-container">
        <form id="login-form">
          <h2>Login</h2>
          <label for="login-username">Username</label>
          <input type="text" id="login-username" name="username" required />

          <label for="login-password">Password</label>
          <input type="password" id="login-password" name="password" required">

          <button type="submit">Login</button>
          <span>&nbsp;</span>
        </form>
      </div>

      <div class="form-container">
        <form id="register-form">
          <h2>Register</h2>
          <label for="register-username">Username</label>
          <input type="text" id="register-username" name="username" required />

          <label for="register-password">Password</label>
          <input
            type="password"
            id="register-password"
            name="password"
            required
          />

          <label for="register-confirm-password">Confirm Password</label>
          <input
            type="password"
            id="register-confirm-password"
            name="confirm-password"
            required
          />

          <button type="submit">Register</button>
          <span>&nbsp;</span>
        </form>
      </div>

      <% } %>
    </div>

    <script>
      const $ = (el) => document.querySelector(el);

      const loginForm = $("#login-form");
      const loginSpan = $("#login-form span");

      const registerForm = $("#register-form");
      const registerSpan = $("#register-form span");

      const logoutButton = $("#close-session");

      loginForm?.addEventListener("submit", (e) => {
        e.preventDefault();

        const username = $("#login-username").value;
        const password = $("#login-password").value;

        async function loginUser(username, password) {
          try {
            const res = await fetch("/login", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ username, password }),
            });
            if (!res.ok) {
              const errData = await res.json();
              if (errData.name === "ZodError") {
                let errMessage = errData.issues[0].message;
                let path = errData.issues[0].path;

                loginSpan.innerText = `Login fallido, ${path} ${errMessage}`;
                loginSpan.style.color = "red";
                return;
              }
              loginSpan.innerText = `Login fallido ${errData.message}`;
              loginSpan.style.color = "red";
            } else {
              loginSpan.innerText = "Login exitoso. Enviando...";
              loginSpan.style.color = "green";

              setTimeout(() => {
                window.location.reload();
              }, 2000);
            }
          } catch (err) {
            throw new Error(err.message);
          }
        }

        loginUser(username, password);
      });

      registerForm?.addEventListener("submit", (e) => {
        e.preventDefault();
        const username = $("#register-username").value;
        const password = $("#register-password").value;
        const confirmPassword = $("#register-confirm-password").value;

        if (password !== confirmPassword) {
          alert("Las contrasenÌƒas no coinciden");
          return;
        }

        async function registerUser(username, password) {
          try {
            const res = await fetch("/register", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ username, password }),
            });

            if (!res.ok) {
              const errData = await res.json();

              if (errData.name === "ZodError") {
                let errMessage = errData.issues[0].message;
                let path = errData.issues[0].path;

                registerSpan.innerText = `Registro fallido, ${path} ${errMessage}`;
                registerSpan.style.color = "red";
                return;
              }
              registerSpan.innerText = `Registro fallido ${errData.message}`;
              registerSpan.style.color = "red";
            } else {
              registerSpan.innerText = "Registro exitoso. Enviando...";
              registerSpan.style.color = "green";

              setTimeout(() => {
                window.location.reload();
              }, 2000);
            }
          } catch (err) {
            console.log(err, "error");
          }
        }

        registerUser(username, password);
      });

      logoutButton?.addEventListener("click", (e) => {
        e.preventDefault();
        fetch("/logout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        }).then((res) => {
          if (res.ok) {
            window.location.href = "/";
          }
        });
      });
    </script>
  </body>
</html>
